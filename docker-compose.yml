services:
  etcd1: &etcd
    image: ${PATRONI_TEST_IMAGE:-patroni}
    environment:
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: tutorial
      ETCD_UNSUPPORTED_ARCH: arm64
    container_name: demo-etcd1
    hostname: etcd1
    command: etcd --name etcd1 --initial-advertise-peer-urls http://etcd1:2380

  etcd2:
      <<: *etcd
      container_name: demo-etcd2
      hostname: etcd2
      command: etcd --name etcd2 --initial-advertise-peer-urls http://etcd2:2380

  etcd3:
      <<: *etcd
      container_name: demo-etcd3
      hostname: etcd3
      command: etcd --name etcd3 --initial-advertise-peer-urls http://etcd3:2380

  haproxy:
      image: ${PATRONI_TEST_IMAGE:-patroni}
      env_file: docker/patroni.env
      hostname: haproxy
      container_name: demo-haproxy
      ports:
        - "5000:5000"
        - "5001:5001"
      volumes:
        - ./haproxy.cfg:/etc/haproxy.cfg
      command: haproxy -f /etc/haproxy/haproxy.cfg
      environment: &haproxy_env
        ETCDCTL_ENDPOINTS: http://etcd1:2379,http://etcd2:2379,http://etcd3:2379
        PATRONI_ETCD3_HOSTS: "'etcd1:2379','etcd2:2379','etcd3:2379'"
        PATRONI_SCOPE: demo
      healthcheck:
        test: ["CMD", "haproxy", "-c", "-f", "/etc/haproxy/haproxy.cfg"]
        interval: 7s
        timeout: 5s
        retries: 5

  patroni1:
      image: ${PATRONI_TEST_IMAGE:-patroni}
      env_file: docker/patroni.env
      hostname: patroni1
      container_name: demo-patroni1
      environment:
          <<: *haproxy_env
          PATRONI_NAME: patroni1

  patroni2:
      image: ${PATRONI_TEST_IMAGE:-patroni}
      env_file: docker/patroni.env
      hostname: patroni2
      container_name: demo-patroni2
      environment:
          <<: *haproxy_env
          PATRONI_NAME: patroni2

  patroni3:
        image: ${PATRONI_TEST_IMAGE:-patroni}
        env_file: docker/patroni.env
        hostname: patroni3
        container_name: demo-patroni3
        environment:
            <<: *haproxy_env
            PATRONI_NAME: patroni3

  flyway:
    image: flyway/flyway:11.8.1
    depends_on:
      haproxy:
        condition: service_healthy
    environment:
      FLYWAY_URL: jdbc:postgresql://haproxy:5000/postgres
      FLYWAY_USER: postgres
      FLYWAY_PASSWORD: postgres
      FLYWAY_LOCATIONS: filesystem:/flyway/sql
      FLYWAY_TARGET: ${MIGRATION_VERSION:-latest}
      FLYWAY_VALIDATE_ON_MIGRATE: "false"
    volumes:
      - ./migrations:/flyway/sql
    command:
      - -url=jdbc:postgresql://haproxy:5000/postgres
      - -user=postgres
      - -password=postgres
      - -connectRetries=60
      - migrate
    healthcheck:
      test: [ "CMD-SHELL", "flyway info -url=$$FLYWAY_URL -user=$$FLYWAY_USER -password=$$FLYWAY_PASSWORD | grep '^| Version | Description |']" ]
      interval: 5s
      timeout: 10s
      retries: 20

  seed:
    image: python:3.12
    depends_on:
      haproxy:
        condition: service_healthy
      flyway:
        condition: service_completed_successfully
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: haproxy
      POSTGRES_PORT: 5000
      APP_ENV: ${APP_ENV:-dev}
      SEED_COUNT: ${SEED_COUNT:-10}
      ANALYST_NAMES: ${ANALYST_NAMES:-}
      SEED_VERSION: ${SEED_VERSION:-all}
    volumes:
        - ./seeds:/app/seeds
        - ./seed.py:/app/seed.py
        - ./requirements.txt:/app/requirements.txt
    working_dir: /app
    command: >
        sh -c "pip install -r requirements.txt &&
        python seed.py"
    healthcheck:
      test: [ "CMD-SHELL", "ps aux | grep 'python seed.py' || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://migrator_user:admin123@postgres:5432/wow_db?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres-exporter/queries.yml"
    volumes:
      - ./queries.yml:/etc/postgres-exporter/queries.yml
    ports:
      - "9187:9187"
    depends_on:
      haproxy:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    depends_on:
      haproxy:
        condition: service_healthy

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
        haproxy:
          condition:
            service_healthy

  query-simulator:
    image: python:3.12
    depends_on:
      haproxy:
        condition:
          service_healthy
      flyway:
        condition: service_completed_successfully
      seed:
        condition: service_completed_successfully
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: haproxy
      POSTGRES_PORT: 5000
      QUERY_INTERVAL: ${QUERY_INTERVAL:-0.5}
    volumes:
      - ./query_simulator:/app/query_simulator
      - ./query_simulator.py:/app/query_simulator.py
      - ./requirements.txt:/app/requirements.txt
    working_dir: /app
    command: >
      sh -c "pip install -r requirements.txt &&
      python query_simulator.py"

  db-backup:
    build:
      context: ./backup
      dockerfile: Dockerfile.backup
    container_name: db_backup
    depends_on:
      haproxy:
        condition:
          service_healthy
      flyway:
        condition: service_completed_successfully
      seed:
        condition: service_completed_successfully
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      POSTGRES_HOST: haproxy
      POSTGRES_PORT: 5000
      BACKUP_RETENTION_COUNT: ${BACKUP_RETENTION_COUNT:-5}
    volumes:
      - ./db_backups:/backups
      - ./backup/backup.sh:/usr/local/bin/backup.sh
    cap_add:
      - SYS_NICE
    command: >
      sh -c "chmod +x /usr/local/bin/backup.sh &&
      echo '${BACKUP_INTERVAL_CRON} /usr/local/bin/backup.sh >> /var/log/cron.log 2>&1' > /etc/crontabs/root &&
      cat /etc/crontabs/root &&
      crond &&
      tail -f /var/log/cron.log"
